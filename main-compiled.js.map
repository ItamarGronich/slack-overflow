{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main-compiled.js","sourcesContent":["/**\n * # Chat Module #\n *\n *\n * ## to operate, chat module requires a HTML structure as follows: ##\n *\n *  <form id=\"chatInput\">\n *      <section>\n *          <label for=\"usrName\" value=\"name\"></label>\n *           <input type=\"text\" id=\"usrName\"/>\n *      </section>\n *      <section>\n *          <label for=\"msgId\">Message ID:</label>\n *          <input id=\"msgId\"/>\n *       </section>\n *       <section>\n *          <label for=\"msgBody\" value=\"message body\"></label>\n *          <input id=\"msgBody\"/>\n *       </section>\n *       <button id=\"refresh\"></button>\n *       <button id=\"post\">Send</button>\n *       <button id=\"change\">Edit</button>\n *       <button id=\"delete\">Delete</button>\n *  </form>\n *  <section class=\"msgBoard\"></section>\n *\n * ### The message board tag will be filled with the messages with the following structure: ###\n *\n *      <article class=\"message\">\n *          <h1></h1> // the name of the sender\n *\n *          // contains: \"ID:\" + (id number...). the data-layout attribute should be used to hide this element.\n *          <p data-layout=\"hide\"></p>\n *\n *          <p></p> // contains the message text.\n *      </article>\n */\nvar chatModule = (function(){\n\n    var btnRefresh = document.querySelector('#refresh'),\n        btnPost    = document.querySelector('#post'),\n        btnDelete  = document.querySelector('#delete'),\n        btnChange  = document.querySelector('#change'),\n        form       = document.querySelector('#chatInput'),\n        DONE       = 4,\n        OK         = 200,\n        url        = 'https://hidden-headland-7200.herokuapp.com/',\n        msgArray; // variable will be assigned with all messages elements\n\n\n    // disables form default validation mechanisms.\n    form.onsubmit = event => {event.preventDefault();return (function validateMyForm(){return false;})()};\n\n    /**\n     * @module -  The Core module. includes the ajax function.\n     * @function - the ajax function\n     * @type {{ajax}}\n     * @exports - an API with an core.ajax(); method\n     */\n    var core = (function(){\n\n/**\n * AJAX Request function with callback and optional request headers.\n * @param request      - type of request. accepts 'GET', 'POST', 'PUT' & 'DELETE'\n *\n * @param url          - path on the server:\n *                       GET    = https://hidden-headland-7200.herokuapp.com/\n *                       POST   = https://hidden-headland-7200.herokuapp.com/new/\n *                       PUT    = https://hidden-headland-7200.herokuapp.com/edit/<_id-number-here>\n *                       DELETE = https://hidden-headland-7200.herokuapp.com/delete/<_id-number-here>\n *\n * @param callback     - function to execute on readyState === 4 (DONE).\n *\n * @param body         - the body of the request. accepts empty, null and JSON string.\n *       (optional)\n *\n * @param headers      - request headers. if needed, syntax is a single string separated\n *       (optional)      by a colon ':'. In example - <code>'Content-Type:application/json'</code>\n *                       multiple request headers is handled with array of same syntaxed strings.\n *\n * @param responseType - a string of expected response types. can be left blank defaults to 'json'\n *       (optional)\n */\n        function ajax(request, url, callback, body, headers, responseType){\n\n            // create promise on JAX Requests\n            var promise = new Promise(function(resolve, reject) {\n\n                var xhr  = new XMLHttpRequest(),\n                    args;\n\n                // open request\n                xhr.open(request, url);\n\n                // set request headers based on typeof headers.\n                //if headers is a string. This means that there's only one request header to set\n                if ( typeof headers === 'string' && !!headers){\n                    //split strings into arguments array. always a length of 2.\n                    args = headers.split(':');\n\n                    // set headers based on the array.\n                    xhr.setRequestHeader(args[0], args[1]);\n                }\n\n                // if headers is an array. This means that there's more than one request header to set\n                else if( headers instanceof Array ){\n\n                    // loop over all setRequestHeader arguments\n                    headers.forEach(function(el){\n                        if (typeof el === 'string'){\n\n                            //split every arument to an aray of the two arguments required for setRequestHeader\n                            args = el.split(\":\");\n\n                            // evoke setRequestHeader for each of the arguments supplied.\n                            xhr.setRequestHeader(args[0], args[1]);\n                        }});\n\n                }\n\n                // setting expected response type. defaults to 'json'\n                xhr.responseType = responseType || 'json';\n\n                xhr.onreadystatechange = function(){\n\n                    // if DONE and OK\n                    if(xhr.readyState === DONE && xhr.status === OK){\n                        if (xhr.response !== null){\n                            console.log(xhr.response.message || \"no response\");\n                        }\n                        callback(xhr, resolve); // evoke callback with xhr object as first argument.\n                                                // and the resolve function as second!\n                                                // user can evoke a .then function by the resolve\n                                                // function they add to the callback!\n\n                        // if DONE but not OK\n                    } else if (xhr.readyState === DONE && xhr.status !== OK){\n                        console.log('bad request');\n                        reject('request failed');// on failure evoke reject function to promise\n                    }\n                };\n\n                // sends the request.\n                // if body exists or it's a null => send request with specified body\n                // else send request with no body\n                if(typeof body === 'function') {\n                    xhr.send(body());\n                }else if( body !== null && body !== undefined) {\n                    xhr.send(body);\n                } else {\n                    xhr.send();\n                }\n\n                console.log('request ' + request + ' has been sent');\n            });\n\n\n            return promise;// send the promise down the chain\n        }\n\n        // returns core API\n        return {\n            ajax: ajax\n        }\n\n    })();\n\n\n\n\n    var utils = (function(){\n        var contentJson  = 'Content-Type:application/json',\n            datasetState = 'data-state',\n            selected     = 'selected',\n            empty        = 'empty response',\n            logFeedback  = function(xhr){var feedback = xhr.response !== null ? xhr.response.message : empty;\n                console.log(\"message status: \" + feedback);},\n            getMessage   = function (){return '{\"message\":\"'+ msgBody.value + '\",\"name\":\"' + usrName.value +'\"}'};\n\n\n/*\n * ================================================================================================================\n *                                           Message Action Utility\n * ================================================================================================================\n * */\n\n        // function assigns event listeners to all messages every refresh.\n        function messageAction() {\n\n            // assign all present messages with an event listener\n            for (var j = 0; j < msgArray.length; j++) {\n                msgArray[j].addEventListener('click', function () {\n\n\n\n                    //onclick - assign the clicked element with a selected state.\n\n                    // if it has one already remove the attribute.\n                    if (this.hasAttribute(datasetState)) {\n                        this.removeAttribute(datasetState);\n                    } else {\n                        //when clicked remove all selected states\n                        for (var i = 0; i < msgArray.length; i++) {\n                            msgArray[i].removeAttribute(datasetState);\n                        }\n                        // and assign the clicked element with a selected state.\n                        this.setAttribute(datasetState, selected);\n                    }\n\n\n                    // insert the id value of current selected message to the msgId input field\n                    msgId.value = this.childNodes[1].textContent.slice(4);\n\n                    // if a message is currently selected - unhide edit and delete button\n                    if (this.hasAttribute('data-state')) {\n                        btnChange.setAttribute(datasetState, selected);\n                        btnDelete.setAttribute(datasetState, selected);\n                    } else {  // if it isn't hide it\n                        btnChange.removeAttribute(datasetState);\n                        btnDelete.removeAttribute(datasetState);\n                    }\n\n                });\n            }\n        }\n\n/*\n *============================================= END OF MESSAGE ACTION UTIL =====================================\n * */\n\n\n/*\n * ================================================================================================================\n *                                       Auto Scroll to bottom Util\n * ================================================================================================================\n * */\n\n        function scrollToBottom(msgBoard){\n            msgBoard.scrollTop = msgBoard.scrollHeight;\n        }\n\n/*\n *==================================== END OF AUTO SCROLL TO BOTTOM UTIL ==========================================\n * */\n\n\n/*\n * ================================================================================================================\n *                                           Refresh button callback\n * ================================================================================================================\n * */\n        // arrow function is to prevent ajax(); from firing until event dispatches\n        // also, an 'event' parameter is sent with the arrow function and is p-heightassed as the\n        // last argument to ajax(); function.\n        function refresh(event){\n\n            // stop event bubbling to form\n            if(event)\n                event.stopPropagation();\n\n            // return ! Promised ! AJAX request to get messages\n            return core.ajax('GET', url ,\n                function(xhr, resolve){\n\n                    // the json object with\n                    // an array of object messages\n                    var messages = xhr.response,\n\n                        // string that will later be concatenated into the\n                        // innerHTML.\n                        string = '',\n\n                        // caching the <section class=\"msgBoard\"> tag.\n                        msgBoard = document.querySelector('.msgBoard');\n\n                    // looping over all the message objects\n                    for (var i = 0; i < messages.length; i++){\n                        string += '<article class=\"msg\"><h1>' + messages[i].name +\n                            '</h1><p data-layout=\"hide\"> ID:' + messages[i]._id +\n                            '</p><p>' + messages[i].message + '</p></article>';\n                    }\n\n                    // assigning messages to msgBoard\n                    msgBoard.innerHTML = string;\n\n                    resolve(msgBoard);// sends the msgBoard element to the .then method\n\n                    //after all messages pushed to DOM - select all in array like.\n                    msgArray = document.querySelectorAll('.msg');\n\n                    messageAction();\n\n                })\n\n        }\n\n\n/*\n * ================================================================================================================\n *                                           Post button event\n * ================================================================================================================\n * */\n\n        function post(event) {\n\n            event.stopPropagation();\n\n            return core.ajax('POST', url + 'new',\n                function(xhr, resolve){\n                    logFeedback(xhr);\n\n                    resolve(event);\n\n                },\n                getMessage(),\n                contentJson)\n                .then(refresh)\n        }\n\n\n/*\n * ================================================================================================================\n *                                           Delete button event\n * ================================================================================================================\n * */\n\n        function dell(event){\n\n            event.stopPropagation();\n\n            return core.ajax('DELETE', (url + 'delete/' + msgId.value),\n                function(xhr, resolve){\n                    logFeedback(xhr);\n\n                    resolve(event);\n                },\n                '',\n                contentJson)\n                .then(refresh)\n        }\n\n\n/*\n * ================================================================================================================\n *                                           Edit button event\n * ================================================================================================================\n * */\n\n        function change(event){\n\n            event.stopPropagation();\n\n            return core.ajax('PUT', (url + 'edit/' + msgId.value),\n                function(xhr, resolve){\n                    logFeedback(xhr);\n\n                    resolve(event);\n\n                },\n                getMessage(),\n                contentJson)\n                .then(refresh)\n        }\n\n        //return utils api\n        return {\n            refresh: refresh,\n            send: post,\n            edit: change,\n            remove: dell,\n            scrollToBottom: scrollToBottom\n        }\n\n    })();\n\n\n\n\n\n\n\n\n    document.addEventListener('DOMContentLoaded', function(){\n        console.log('DOM fully loaded and parsed');\n\n        //initializing event listeners\n        btnRefresh.onclick = event => {utils.refresh(event).then(utils.scrollToBottom)};\n        btnPost.onclick    = event => {utils.send(event).then(utils.scrollToBottom)};\n        btnChange.onclick  = utils.edit;\n        btnDelete.onclick  = utils.remove;\n    });\n\n\n// fire refresh when page is fully loaded.\n    window.addEventListener('load', function(){\n        console.log('page finished loading');\n\n        // first initial firing\n        utils.refresh().then(utils.scrollToBottom);\n\n        // automatic 30 sec refresh.\n        setInterval(utils.refresh, 30000);\n    });\n\n\n})();\n\n/**\n * =============================================================================================================\n *                                              END OF CHAT MODULE\n * =============================================================================================================\n */\n\n"]}